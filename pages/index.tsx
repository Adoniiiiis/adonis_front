import Head from 'next/head';
import DefaultLayout from '@/layouts/DefaultLayout';
import BookCard from '@/components/BookCard';
import image from '../public/images/book-cover-platon.jpg';
import VideoCard from '@/components/VideoCard';
import QuoteCard from '@/components/QuoteCard';
import { useDispatch } from 'react-redux';
import { ADD_CONTENTDATA } from '@/Redux/Reducers/ContentDataSlice';
import { useEffect, useState } from 'react';
import GetHomepageContent from '@/Axios/GetHomepageContent';
import GetHomepageSortedContentAxios from '@/Axios/GetHomepageSortedContentAxios';
import HomepageFilterButtons from '@/components/HomepageFilterButtons';

export default function Home() {
  const dispatch = useDispatch();
  const [popular, setPopular] = useState<any>(null);
  const [books, setBooks] = useState<any>(null);
  const [videos, setVideos] = useState<any>(null);
  const [quotes, setQuotes] = useState<any>(null);
  const [contentDisplayed, setContentDisplayed] = useState<any>(null);
  const [isHomepageSortedContentLoading, setIsHomepageSortedContentLoading] =
    useState(true);
  const [filterButtons, setFilterButtons] = useState<any>(null);

  // Filtering by Popular, Book, Video or Quote
  const changeContentType = (contentType: string) => {
    if (contentType === 'popular') {
      setContentDisplayed(popular);
    } else if (contentType === 'books') {
      setContentDisplayed(books);
    } else if (contentType === 'videos') {
      setContentDisplayed(videos);
    } else if (contentType === 'quotes') {
      setContentDisplayed(quotes);
    }
  };

  useEffect(() => {
    if (popular) {
      setContentDisplayed(popular);
    }
  }, [popular]);

  // Setting Buttons to Filter by Popular, Book, Video or Quote
  useEffect(() => {
    if (isHomepageSortedContentLoading) {
      setFilterButtons(
        <HomepageFilterButtons
          changeContentType={changeContentType}
          clickable={false}
        />
      );
    } else {
      setFilterButtons(
        <HomepageFilterButtons
          changeContentType={changeContentType}
          clickable={true}
        />
      );
    }
  }, [isHomepageSortedContentLoading]);

  // Getting Homepage Content
  useEffect(() => {
    GetHomepageContent().then((res: any) => {
      setPopular(
        Object.values(res.contentData).map((el: any, key) => {
          if (el.category === 'book') {
            return (
              <div key={key} className="-mt-5">
                <BookCard bookCoverUrl={image} bookData={el} />
              </div>
            );
          } else if (el.category === 'quote') {
            return (
              <div key={key} className="-mt-5">
                <QuoteCard quoteData={el} />
              </div>
            );
          } else if (el.category === 'video') {
            const validUrl = el.link.replace('watch?v=', 'embed/');
            const videoUrl = `${validUrl}?controls=0`;
            return (
              <div key={key} className="-mt-5">
                <VideoCard videoUrl={videoUrl} videoData={el} />
              </div>
            );
          }
        })
      );
    });
    GetHomepageSortedContentAxios().then((res: any) => {
      setBooks(
        Object.values(res.books).map((book: any, key) => {
          return (
            <div key={key}>
              <BookCard bookCoverUrl={image} bookData={book} />
            </div>
          );
        })
      );
      setQuotes(
        Object.values(res.quotes).map((quote: any, key) => {
          return (
            <div key={key}>
              <QuoteCard quoteData={quote} />
            </div>
          );
        })
      );
      setVideos(
        Object.values(res.videos).map((video: any, key) => {
          const validUrl = video.link.replace('watch?v=', 'embed/');
          const videoUrl = `${validUrl}?controls=0`;
          return (
            <div key={key}>
              <VideoCard videoUrl={videoUrl} videoData={video} />
            </div>
          );
        })
      );
      setIsHomepageSortedContentLoading(false);
    });
  }, []);

  return (
    <>
      <Head>
        <title>Homepage</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <DefaultLayout>
          <div className="flex justify-center">
            <div className="flex-col">
              {filterButtons}
              {contentDisplayed}
            </div>
          </div>
        </DefaultLayout>
      </main>
    </>
  );
}
