import Head from 'next/head';
import DefaultLayout from '@/layouts/DefaultLayout';
import { useState, useEffect } from 'react';
import FilterContentResponse from '@/Axios/FilterContentResponse';
import useContent from '@/context/ContentContext';
import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';

export default function Bookmarks() {
  const [bookmarkDisplay, setBookmarkDisplay] = useState<any>(null);
  const { contentData } = useContent();

  const noBookmarks = (
    <p className="mt-4 dark:text-white">
      Vous n'avez aucun favoris pour le moment.
    </p>
  );

  // Handling Bookmarks Loading, Display and NoContent
  useEffect(() => {
    if (contentData) {
      if (contentData.popularContent.length > 0) {
        const bookmarkedContents = contentData.popularContent.filter(
          (content: any) => content.isBookmarked != false
        );
        const filteredContents = FilterContentResponse(bookmarkedContents);
        setBookmarkDisplay(filteredContents);
      } else {
        setBookmarkDisplay(noBookmarks);
      }
    } else {
      setBookmarkDisplay(<p className="mt-4 dark:text-white">Chargement...</p>);
    }
  }, [contentData]);

  const onDragEnd = (result: any) => {
    const { source, destination } = result;
    if (!destination) return;
    // If the user drops back in the same position
    if (
      destination.droppableId === source.droppableId &&
      destination.index === source.index
    )
      return;

    const newBookmarksOrder = reorderBookmarks(
      bookmarkDisplay,
      source.index,
      destination.index
    );
    newBookmarksOrder && setBookmarkDisplay(newBookmarksOrder);
  };

  const reorderBookmarks = (
    bookmarkDisplay: any,
    startIndex: any,
    endIndex: any
  ) => {
    const bookmarksArray = Array.from(bookmarkDisplay);
    const [removed] = bookmarksArray.splice(startIndex, 1);
    bookmarksArray.splice(endIndex, 0, removed);
    return bookmarksArray;
  };

  return (
    <>
      <DragDropContext onDragEnd={onDragEnd}>
        <Head>
          <title>Bookmarks</title>
          <meta name="description" content="Generated by create next app" />
          <meta name="viewport" content="width=device-width, initial-scale=1" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <main>
          <DefaultLayout>
            <div className="flex justify-center m-10 p-10">
              <div className="flex-col">
                {bookmarkDisplay && bookmarkDisplay.length > 0 && (
                  <h1 className="mb-8 -mt-8 text-[1.1em] dark:text-white">
                    Mes favoris
                  </h1>
                )}
                {bookmarkDisplay && (
                  <Droppable droppableId="bookmarks">
                    {(droppableProvided) => (
                      <div
                        {...droppableProvided.droppableProps}
                        ref={droppableProvided.innerRef}
                      >
                        {bookmarkDisplay.map((el: any, i: number) => {
                          return (
                            <Draggable
                              key={el?.props.children.props.data.id}
                              draggableId={el?.props.children.props.data.id.toString()}
                              index={i}
                            >
                              {(draggableProvided, draggableSnapshot) => (
                                <div
                                  {...draggableProvided.dragHandleProps}
                                  {...draggableProvided.draggableProps}
                                  ref={draggableProvided.innerRef}
                                  className={`${
                                    draggableSnapshot.isDragging && 'opacity-90'
                                  }`}
                                >
                                  {el}
                                </div>
                              )}
                            </Draggable>
                          );
                        })}
                        {droppableProvided.placeholder}
                      </div>
                    )}
                  </Droppable>
                )}
              </div>
            </div>
          </DefaultLayout>
        </main>
      </DragDropContext>
    </>
  );
}
