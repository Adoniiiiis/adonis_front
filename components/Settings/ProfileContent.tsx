import React, { useEffect, useRef, useState } from 'react';
import Head from 'next/head';
import useAuth from '@/context/AuthContext';
import ChangeProfileContentAxios from '@/Axios/ChangeProfileContentAxios';
import { profileDataType } from '@/Types/ProfileDataType';
import { toast } from 'react-toastify';
import useLang from '@/hooks/useLang';
import { BsPlusCircleDotted } from 'react-icons/bs';
import GetProfileImgAxios from '@/Axios/GetProfileImgAxios';
import ProfileImg from './ProfileImg';
import ChangeProfileImgAxios from '@/Axios/ChangeProfileImgAxios';

export default function ProfileContent() {
  const { getUser } = useAuth();
  const user = getUser();
  const [isBtnDisabled, setIsBtnDisabled] = useState<boolean>(true);
  const [newProfileImage, setNewProfileImage] = useState<any>(null);
  const [profileImage, setProfileImage] = useState<any>(null);
  const [profileData, setProfileData] = useState<profileDataType>({
    id: user && user.id,
    name: user && user.name,
    email: user && user.email,
    username: user && user.username,
  });
  const langStrings = useLang();

  useEffect(() => {
    if (user && user.profile_img) {
      setProfileImage(user.profile_img);
    }
  }, []);

  function checkIfDataChanged() {
    const didItChange =
      profileData.name != user.name ||
      profileData.email != user.email ||
      profileData.username != user.username
        ? true
        : false;
    return didItChange;
  }

  useEffect(() => {
    profileData.email != '' && checkIfDataChanged()
      ? setIsBtnDisabled(false)
      : setIsBtnDisabled(true);
  }, [profileData]);

  const handleInputChange = (e: any) => {
    setProfileData({ ...profileData, [e.target.id]: e.target.value });
  };

  const handleSubmit = (e: any) => {
    e.preventDefault();
    ChangeProfileContentAxios(profileData);
    localStorage.setItem('user', JSON.stringify(profileData));
    toast.success('Vos informations ont bien été changées');
    setIsBtnDisabled(true);
  };

  const handleProfileImgChange = async (e: any) => {
    const file: any = e.target.files;
    const chosenProfileImg: string = URL.createObjectURL(file[0]);
    setNewProfileImage(chosenProfileImg);
    try {
      const newImage = await ChangeProfileImgAxios(user.id, file[0]);
      user.profile_img = newImage.profile_img;
      localStorage.setItem('user', JSON.stringify(user));
      toast.success('Votre image de profil a été modifiée avec succès!');
    } catch {
      toast.error(
        "Une erreur est survenue dans l'enregistrement de votre image."
      );
    }
  };

  return (
    <>
      <Head>
        <title>{langStrings && langStrings.settings}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <section className="flex flex-col items-center settings_sm:justify-around settings_sm:flex-row mt-3">
        <div className="flex flex-col lg:py-0">
          <h1 className="mb-6 text-xl font-bold leading-tight tracking-tight text-gray-900 md:text-2xl dark:text-white">
            {langStrings && langStrings.myProfile}
          </h1>
          <form
            className="space-y-4 md:space-y-6"
            action="#"
            onSubmit={(e) => handleSubmit(e)}
          >
            <div>
              <label
                htmlFor="name"
                className="block mb-1 text-sm font-medium text-gray-900 dark:text-white"
              >
                Nom complet
              </label>
              <input
                onChange={(e) => handleInputChange(e)}
                type="text"
                name="name"
                id="name"
                value={profileData.name || ''}
                className="w-[300px] bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
              />
            </div>
            <div>
              <label
                htmlFor="email"
                className="block mb-1 text-sm font-medium text-gray-900 dark:text-white"
              >
                Email
              </label>
              <input
                onChange={(e) => handleInputChange(e)}
                type="email"
                name="email"
                id="email"
                className="w-[300px] bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
                value={profileData.email || ''}
              />
            </div>
            <div>
              <label
                htmlFor="username"
                className="block mb-1 text-sm font-medium text-gray-900 dark:text-white"
              >
                Nom d&#39;utilisateur
              </label>
              <input
                onChange={(e) => handleInputChange(e)}
                type="text"
                name="username"
                id="username"
                value={profileData.username || ''}
                className="-mb-1 w-[300px] bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
              />
            </div>
            <button
              disabled={isBtnDisabled}
              type="submit"
              className={`${
                isBtnDisabled
                  ? 'bg-primary-600 bg-opacity-50 cursor-not-allowed'
                  : 'bg-primary-600 hover:bg-primary-700 cursor-pointer dark:bg-primary-600 dark:hover:bg-primary-700 dark:focus:ring-primary-800'
              } w-[300px] text-white focus:ring-4 focus:outline-none focus:ring-primary-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center`}
            >
              Enregistrer
            </button>
          </form>
        </div>
        <div className="mt-8 settings_sm:ml-8 settings_sm:-mt-28 relative group">
          <BsPlusCircleDotted
            size={50}
            color="black"
            className="absolute top-1/2 left-1/2 translate-x-[-50%] translate-y-[-50%] hidden group-hover:block"
          />
          <input
            className="opacity-0 absolute top-1/2 left-1/2 translate-x-[-50%] translate-y-[-50%] rounded-full w-[120px] h-[120px]"
            type="file"
            accept="image/*"
            onChange={(e) => handleProfileImgChange(e)}
          />
          <ProfileImg
            profileImg={profileImage}
            newProfileImg={newProfileImage}
          />
        </div>
      </section>
    </>
  );
}
